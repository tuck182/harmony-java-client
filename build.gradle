apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'osgi'

group = 'net.whistlingfish'
version = '1.2.2'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
}

configurations {
    provided
}

dependencies {
    // basic libraries
    compile 'com.google.guava:guava:21.0'
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.7'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.7'
    compile 'org.slf4j:slf4j-api:1.7.24'
    provided 'ch.qos.logback:logback-core:1.2.1'
    provided 'ch.qos.logback:logback-classic:1.2.1'

    // Dependency injection
    compile 'com.google.inject:guice:4.1.0'
    
    // XMPP
    compile 'org.igniterealtime.smack:smack-core:4.2.0'
    compile 'org.igniterealtime.smack:smack-java7:4.2.0'
    compile 'org.igniterealtime.smack:smack-tcp:4.2.0'
    compile 'org.igniterealtime.smack:smack-debug:4.2.0'
    
    // Shell
    compile 'args4j:args4j:2.33'
    compile 'com.martiansoftware:jsap:2.1'

    testCompile 'junit:junit:4.+'
}

sourceSets {
    main { compileClasspath += configurations.provided }
}

eclipse {
    classpath { plusConfigurations += configurations.provided }
}

test {
    systemProperties 'property': 'value'
}

ext.sharedManifest = manifest {
    attributes(
        'Implementation-Title': 'Java Harmony Hub Client',
        'Implementation-Version': version,
        'Main-Class': 'net.whistlingfish.harmony.Main'
    )
}

jar {
    manifest = osgiManifest {
        from project.sharedManifest
        
        classesDir = sourceSets.main.output.classesDir
        classpath = sourceSets.main.runtimeClasspath

        instruction 'Private-Package', 'net.whistlingfish.harmony.*'
        instruction 'Import-Package', 'sun.misc;resolution:=optional,*'
        instruction 'Export-Package', "net.whistlingfish.harmony;version=${version},net.whistlingfish.harmony.config;version=${version}"
    }
}

task allJar(type: Jar) {
    baseName = "$project.name"
    classifier = "all"
    
    from sourceSets.main.output
    from { (configurations.runtime + configurations.provided).collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        from project.sharedManifest
    }
}

task openhabJar(type: Jar) {
    baseName = "$project.name"
    classifier = "openhab"
    
    from sourceSets.main.output
    from { configurations.compile }
    manifest = osgiManifest {
        classesDir = sourceSets.main.output.classesDir
        classpath = sourceSets.main.runtimeClasspath
        
        instruction 'Private-Package', 'net.whistlingfish.harmony.*'
        instruction 'Import-Package', /net.whistlingfish.harmony.*;version="${version}",org.slf4j.*;version="[1.7,1.8)",sun.misc;resolution:=optional/
        instruction 'Export-Package', "net.whistlingfish.harmony;version=${version},net.whistlingfish.harmony.config;version=${version}"
        instruction 'Bundle-ClassPath', project.configurations.compile.files.collect { it.name }.join(',')+",."
    }

}

assemble { dependsOn allJar, openhabJar }

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

artifacts {
    archives allJar
    archives openhabJar
}

publishing {
    publications {
        openhab(MavenPublication) {
            from components.java
            artifact openhabJar {
                classifier "openhab"
            }
        }
    }
}

task echoEclipseSourceSets() << {
    eclipse.classpath.sourceSets.each { println it }
}
